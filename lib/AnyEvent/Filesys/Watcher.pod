=head1 NAME

AnyEvent::Filesys::Watcher - Watch file system for changes

=head1 SYNOPSIS

    use AnyEvent::Filesys::Watcher;

    $watcher = AnyEvent::Filesys::Watcher->new(
        directories => ['src', 'deps'],
        interval => 2.0,
        filter => sub { shift !~ /\.(swp|tmp)$/ },
        callback => sub {
        my (@events) = @_;
            # Process.
        },
        # Improves efficiency on Linux.
        parse_events => 1,
    );

=head1 DESCRIPTION

This module is very similar to B<AnyEvent::Filesys::Notify>.  The main
difference is that it is not based on L<Moo> and has therefore has
dependencies.

See L</"DIFFERENCES TO AnyEvent::Filesys::Notify"> for other differences.

=head1 CONSTRUCTORS

The following constructors are available:

=over 4

=item B<new(OPTIONS)>

Creates a new B<AnyEvent::Filesys::Watcher>.  The constructor may throw an
exception in case of an error!

In fact, it createss an instance of one of the subclasses
L<AnyEvent::Filesys::Watcher::Fallback>,
L<AnyEvent::Filesys::Watcher::FSEvents>,
L<AnyEvent::Filesys::Watcher::INotify2>,
L<AnyEvent::Filesys::Watcher::KQueue> that all inherit from this module.

B<OPTIONS> is a hash of named options:

=over 8

=item B<directories DIRECTORIES>

B<DIRECTORIES> is a reference to an array of directories to monitor.

This argument is required.

=item B<callback CALLBACK>

A code reference that is called, when a modification to the monitored
directories is deteced. The callback is passed a list of
L<AnyEvent::Filesys::Watcher::Events>.

This argument is required.

=item B<interval SECONDS>

Specifies the time in fractional seconds between file system checks
for the L<AnyEvent::Filesys::Watcher::Fallback> implementation.

Specifies the latency for L<Mac::FSEvents> for the
L<AnyEvent::Filesys::Watcher::FSEvents> implementation.

Ignored for the L<AnyEvent::Filesys::Watcher::Inotify2> implementation.

Optional. The default is 2.0.

=item B<filter FILTER>

B<FILTER> should either be a regular expression or a code reference.  If this
is a regular expression, only (absolute) file names matching that regular
expressions can cause an event.

If B<FILTER> is a code reference, the subrouting receives the absolute file
name as an argument and should return a truthy value for all files that
should cause an event.

Optional. By default, all events are passed through.

=item B<backend BACKEND>

Force the use of the specified backend. The backend is assumed to
have the "AnyEvent::Filesys::Watcher" prefix, but you can force
a fully qualified name by prefixing it with a plus.

Optional. The default is os-dependent: For Linux it is
L<AnyEvent::Filesys::Watcher::Inotify2>, for Mac OS it is
L<AnyEvent::Filesys::Watcher::FSEvents>, for BSD systems it is
L<AnyEvent::Filesys::Watcher::KQueue>, and for all other systems it is
L<AnyEvent::Filesys::Watcher::Fallback>.

=item B<parse_events BOOLEAN>

In backends that support it (currently INotify2), parse the events
instead of rescanning file system for changed "stat()" information.
Note, that this might cause slight changes in behavior. In
particular, the Inotify2 backend will generate an additional
'modified' event when a file changes (once when opened for write,
and once when modified).

=item <skip_subdirectories BOOLEAN>

Skips subdirectories and anything in them while building a list of
files/dirs to watch. Optional.

=back

=back

=head1 METHODS

The public API consists of the following methods:

=over 4

=item B<directories>

Getter for the array reference of directories that get monitored.

=item B<callback [CALLBACK]>

Getter/setter for the callback.

=item B<interval>

Getter for the interval between polls.

=item B<filter [FILTER]>

Getter/setter for the filter.

=item B<parseEvents [PARSE_EVENTS]>

Getter/setter for the "parse_events" flag.

=item B<skipSubdirectories>

Getter for the "skip_subdirectories" flag.

=back

=head1 INSTALLATION

Unless you are using MS-DOS, you should install a helper module that provides
the binding for the operating system's filesystem watch functionality:

=head2 Linux

Install L<Linux::Inotify2>:

    $ cpanm Linux::Inotify2

=head2 Mac OS

Install a fork of L<Mac::FSEvents>:

    $ git clone https://github.com/skaji/Mac-FSEvents
    $ cd Mac-FSEvents
    $ perl Makefile.PL
    $ make
    $ make install

The current version 0.14 of L<Mac::FSEvents> available on CPAN does not
build on recent Mac OS versions.

=head2 BSD

Install L<IO::KQueue> and L<BSD::Resource>

    $ cpanm IO::KQueue BSD::Resource

This would also work for Mac OS but you have little reason to prefer
L<IO::KQueue> over L<Mac::FSEvents> unless you are a developer or just
curious.

=head1 DIFFERENCES TO AnyEvent::Filesys::Notify

=over 4

=item The constructor argument "no_external" is ignored.

=item There is no method "no_external()".

=item Methods and named arguments are "directories" and not "dirs".

=item Methods and named arguments are "callback" and not "cb".

=item The named argument is "skip_subdirectories" and not "skip_subdirs".

=item The method is "skipSubdirectories" and not "skip_subdirs".

=item The method is "parseEvents" and not "parse_events".

=item None of the L<Moose> methods like "does()" are implemented.

=item No type checking is done on arguments.

=back

=head1 BUGS

Please report bugs to the issue tracker at
L<GitHub|https://github.com/gflohr/AnyEvent-Filesys-Watcher/issues>.

=head1 AUTHOR

B<AnyEvent::Filesys::Watcher> was written by L<Guido Flohr|http://www.guido-flohr.net/>.

=head1 SEE ALSO

L<AnyEvent::Filesys::Watcher::Fallback>,
L<AnyEvent::Filesys::Watcher::FSEvents>,
L<AnyEvent::Filesys::Watcher::INotify2>,
L<AnyEvent::Filesys::Watcher::KQueue>,
L<Linux::Inotify2>,
L<Mac::FSEvents>,
L<IO::KQueue>, L<BSD::Resource>,
L<AnyEvent::Filesys::Notify>, perl(1)
